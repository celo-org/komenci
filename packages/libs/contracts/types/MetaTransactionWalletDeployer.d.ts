/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type WalletDeployed = ContractEventLog<{
  owner: string;
  wallet: string;
  implementation: string;
  0: string;
  1: string;
  2: string;
}>;

export interface MetaTransactionWalletDeployer extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): MetaTransactionWalletDeployer;
  clone(): MetaTransactionWalletDeployer;
  methods: {
    /**
     * Returns the storage, major, minor, and patch version of the contract.
     * @returns The storage, major, minor, and patch version of the contract.
     */
    getVersionNumber(): NonPayableTransactionObject<{
      0: string;
      1: string;
      2: string;
      3: string;
    }>;

    /**
     * Used to deploy a MetaTransactionWalletProxy, set the implementation, initialize, transfer ownership and emit an event.
     * @param implementation The address of the implementation which the proxy will point to
     * @param initCallData calldata pointing to a method on implementation used to initialize
     * @param owner The external account which will act as signer and owner of the proxy
     */
    deploy(
      owner: string,
      implementation: string,
      initCallData: string | number[]
    ): NonPayableTransactionObject<void>;
  };
  events: {
    WalletDeployed(cb?: Callback<WalletDeployed>): EventEmitter;
    WalletDeployed(
      options?: EventOptions,
      cb?: Callback<WalletDeployed>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "WalletDeployed", cb: Callback<WalletDeployed>): void;
  once(
    event: "WalletDeployed",
    options: EventOptions,
    cb: Callback<WalletDeployed>
  ): void;
}
