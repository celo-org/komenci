/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type ImplementationSet = ContractEventLog<{
  implementation: string;
  0: string;
}>;
export type OwnerSet = ContractEventLog<{
  owner: string;
  0: string;
}>;

export interface InitializableProxy extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): InitializableProxy;
  clone(): InitializableProxy;
  methods: {
    /**
     * Returns the implementation address.
     */
    _getImplementation(): NonPayableTransactionObject<string>;

    /**
     * Returns the Proxy owner's address.
     */
    _getOwner(): NonPayableTransactionObject<string>;

    /**
     * Throws if the initialization callback fails.If the target contract does not need initialization, use setImplementation instead.
     * Sets the address of the implementation contract and calls into it.
     * @param callbackData The abi-encoded function call to perform in the implementation contract.
     * @param implementation Address of the new target contract.
     */
    _setAndInitializeImplementation(
      implementation: string,
      callbackData: string | number[]
    ): PayableTransactionObject<void>;

    /**
     * If the target contract needs to be initialized, call setAndInitializeImplementation instead.
     * Sets the address of the implementation contract.
     * @param implementation Address of the new target contract.
     */
    _setImplementation(
      implementation: string
    ): NonPayableTransactionObject<void>;

    /**
     * Transfers ownership of Proxy to a new owner.
     * @param newOwner Address of the new owner account.
     */
    _transferOwnership(newOwner: string): NonPayableTransactionObject<void>;

    /**
     * Note that anyone is allowed to set the proxy owner if it is set to the null address.
     * Sets the proxy owner if it hasn't already been set.
     * @param owner The address allowed to repoint the proxy to a new implementation.
     */
    _initialize(owner: string): NonPayableTransactionObject<void>;
  };
  events: {
    ImplementationSet(cb?: Callback<ImplementationSet>): EventEmitter;
    ImplementationSet(
      options?: EventOptions,
      cb?: Callback<ImplementationSet>
    ): EventEmitter;

    OwnerSet(cb?: Callback<OwnerSet>): EventEmitter;
    OwnerSet(options?: EventOptions, cb?: Callback<OwnerSet>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "ImplementationSet", cb: Callback<ImplementationSet>): void;
  once(
    event: "ImplementationSet",
    options: EventOptions,
    cb: Callback<ImplementationSet>
  ): void;

  once(event: "OwnerSet", cb: Callback<OwnerSet>): void;
  once(event: "OwnerSet", options: EventOptions, cb: Callback<OwnerSet>): void;
}
