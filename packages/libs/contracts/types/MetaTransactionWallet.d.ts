/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type Deposit = ContractEventLog<{
  sender: string;
  value: string;
  0: string;
  1: string;
}>;
export type EIP712DomainSeparatorSet = ContractEventLog<{
  eip712DomainSeparator: string;
  0: string;
}>;
export type GuardianSet = ContractEventLog<{
  guardian: string;
  0: string;
}>;
export type MetaTransactionExecution = ContractEventLog<{
  destination: string;
  value: string;
  data: string;
  nonce: string;
  returnData: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
}>;
export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;
export type SignerSet = ContractEventLog<{
  signer: string;
  0: string;
}>;
export type TransactionExecution = ContractEventLog<{
  destination: string;
  value: string;
  data: string;
  returnData: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type WalletRecovered = ContractEventLog<{
  newSigner: string;
  0: string;
}>;

export interface MetaTransactionWallet extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): MetaTransactionWallet;
  clone(): MetaTransactionWallet;
  methods: {
    EIP712_EXECUTE_META_TRANSACTION_TYPEHASH(): NonPayableTransactionObject<string>;

    eip712DomainSeparator(): NonPayableTransactionObject<string>;

    guardian(): NonPayableTransactionObject<string>;

    initialized(): NonPayableTransactionObject<boolean>;

    /**
     * Returns true if the caller is the current owner.
     */
    isOwner(): NonPayableTransactionObject<boolean>;

    nonce(): NonPayableTransactionObject<string>;

    /**
     * Returns the address of the current owner.
     */
    owner(): NonPayableTransactionObject<string>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(): NonPayableTransactionObject<void>;

    signer(): NonPayableTransactionObject<string>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;

    /**
     * Returns the storage, major, minor, and patch version of the contract.
     * @returns The storage, major, minor, and patch version of the contract.
     */
    getVersionNumber(): NonPayableTransactionObject<{
      0: string;
      1: string;
      2: string;
      3: string;
    }>;

    /**
     * Used in place of the constructor to allow the contract to be upgradable via proxy.
     * @param _signer The address authorized to execute transactions via this wallet.
     */
    initialize(_signer: string): NonPayableTransactionObject<void>;

    /**
     * Transfers control of the wallet to a new signer.
     * @param _signer The address authorized to execute transactions via this wallet.
     */
    setSigner(_signer: string): NonPayableTransactionObject<void>;

    /**
     * Sets the wallet's guardian address.
     * @param _guardian The address authorized to change the wallet's signer
     */
    setGuardian(_guardian: string): NonPayableTransactionObject<void>;

    /**
     * Changes the wallet's signer
     * @param newSigner The new signer address
     */
    recoverWallet(newSigner: string): NonPayableTransactionObject<void>;

    /**
     * Should be called every time the wallet is upgraded to a new version.
     * Sets the EIP-712 domain separator.
     */
    setEip712DomainSeparator(): NonPayableTransactionObject<void>;

    /**
     * Returns the digest of the provided meta-transaction, to be signed by `sender`.
     * @param _nonce The nonce for this meta-transaction local to this wallet.
     * @param data The data to be sent with the meta-transaction.
     * @param destination The address to which the meta-transaction is to be sent.
     * @param value The CELO value to be sent with the meta-transaction.
     * @returns The digest of the provided meta-transaction.
     */
    getMetaTransactionDigest(
      destination: string,
      value: number | string | BN,
      data: string | number[],
      _nonce: number | string | BN
    ): NonPayableTransactionObject<string>;

    /**
     * Returns the address that signed the provided meta-transaction.
     * @param _nonce The nonce for this meta-transaction local to this wallet.
     * @param data The data to be sent with the meta-transaction.
     * @param destination The address to which the meta-transaction is to be sent.
     * @param r Output value r of the ECDSA signature.
     * @param s Output value s of the ECDSA signature.
     * @param v The recovery id of the ECDSA signature of the meta-transaction.
     * @param value The CELO value to be sent with the meta-transaction.
     * @returns The address that signed the provided meta-transaction.
     */
    getMetaTransactionSigner(
      destination: string,
      value: number | string | BN,
      data: string | number[],
      _nonce: number | string | BN,
      v: number | string | BN,
      r: string | number[],
      s: string | number[]
    ): NonPayableTransactionObject<string>;

    /**
     * Executes a meta-transaction on behalf of the signer.
     * @param data The data to be sent with the meta-transaction.
     * @param destination The address to which the meta-transaction is to be sent.
     * @param r Output value r of the ECDSA signature.
     * @param s Output value s of the ECDSA signature.
     * @param v The recovery id of the ECDSA signature of the meta-transaction.
     * @param value The CELO value to be sent with the meta-transaction.
     * @returns The return value of the meta-transaction execution.
     */
    executeMetaTransaction(
      destination: string,
      value: number | string | BN,
      data: string | number[],
      v: number | string | BN,
      r: string | number[],
      s: string | number[]
    ): NonPayableTransactionObject<string>;

    /**
     * Executes a transaction on behalf of the signer.`
     * @param data The data to be sent with the transaction.
     * @param destination The address to which the transaction is to be sent.
     * @param value The CELO value to be sent with the transaction.
     * @returns The return value of the transaction execution.
     */
    executeTransaction(
      destination: string,
      value: number | string | BN,
      data: string | number[]
    ): NonPayableTransactionObject<string>;

    /**
     * Executes multiple transactions on behalf of the signer.`
     * @param data The concatenated data to be sent in each transaction.
     * @param dataLengths The length of each transaction's data.
     * @param destinations The address to which each transaction is to be sent.
     * @param values The CELO value to be sent with each transaction.
     * @returns The return values of all transactions appended as bytes and an array of the length        of each transaction output which will be 0 if a transaction had no output
     */
    executeTransactions(
      destinations: string[],
      values: (number | string | BN)[],
      data: string | number[],
      dataLengths: (number | string | BN)[]
    ): NonPayableTransactionObject<{
      0: string;
      1: string[];
    }>;
  };
  events: {
    Deposit(cb?: Callback<Deposit>): EventEmitter;
    Deposit(options?: EventOptions, cb?: Callback<Deposit>): EventEmitter;

    EIP712DomainSeparatorSet(
      cb?: Callback<EIP712DomainSeparatorSet>
    ): EventEmitter;
    EIP712DomainSeparatorSet(
      options?: EventOptions,
      cb?: Callback<EIP712DomainSeparatorSet>
    ): EventEmitter;

    GuardianSet(cb?: Callback<GuardianSet>): EventEmitter;
    GuardianSet(
      options?: EventOptions,
      cb?: Callback<GuardianSet>
    ): EventEmitter;

    MetaTransactionExecution(
      cb?: Callback<MetaTransactionExecution>
    ): EventEmitter;
    MetaTransactionExecution(
      options?: EventOptions,
      cb?: Callback<MetaTransactionExecution>
    ): EventEmitter;

    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    SignerSet(cb?: Callback<SignerSet>): EventEmitter;
    SignerSet(options?: EventOptions, cb?: Callback<SignerSet>): EventEmitter;

    TransactionExecution(cb?: Callback<TransactionExecution>): EventEmitter;
    TransactionExecution(
      options?: EventOptions,
      cb?: Callback<TransactionExecution>
    ): EventEmitter;

    WalletRecovered(cb?: Callback<WalletRecovered>): EventEmitter;
    WalletRecovered(
      options?: EventOptions,
      cb?: Callback<WalletRecovered>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "Deposit", cb: Callback<Deposit>): void;
  once(event: "Deposit", options: EventOptions, cb: Callback<Deposit>): void;

  once(
    event: "EIP712DomainSeparatorSet",
    cb: Callback<EIP712DomainSeparatorSet>
  ): void;
  once(
    event: "EIP712DomainSeparatorSet",
    options: EventOptions,
    cb: Callback<EIP712DomainSeparatorSet>
  ): void;

  once(event: "GuardianSet", cb: Callback<GuardianSet>): void;
  once(
    event: "GuardianSet",
    options: EventOptions,
    cb: Callback<GuardianSet>
  ): void;

  once(
    event: "MetaTransactionExecution",
    cb: Callback<MetaTransactionExecution>
  ): void;
  once(
    event: "MetaTransactionExecution",
    options: EventOptions,
    cb: Callback<MetaTransactionExecution>
  ): void;

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;

  once(event: "SignerSet", cb: Callback<SignerSet>): void;
  once(
    event: "SignerSet",
    options: EventOptions,
    cb: Callback<SignerSet>
  ): void;

  once(event: "TransactionExecution", cb: Callback<TransactionExecution>): void;
  once(
    event: "TransactionExecution",
    options: EventOptions,
    cb: Callback<TransactionExecution>
  ): void;

  once(event: "WalletRecovered", cb: Callback<WalletRecovered>): void;
  once(
    event: "WalletRecovered",
    options: EventOptions,
    cb: Callback<WalletRecovered>
  ): void;
}
