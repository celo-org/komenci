/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;
export type ProxyCloneCreated = ContractEventLog<{
  proxyClone: string;
  0: string;
}>;

export interface ProxyCloneFactory extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): ProxyCloneFactory;
  clone(): ProxyCloneFactory;
  methods: {
    /**
     * Returns true if the caller is the current owner.
     */
    isOwner(): NonPayableTransactionObject<boolean>;

    /**
     * Returns the address of the current owner.
     */
    owner(): NonPayableTransactionObject<string>;

    proxyImplementationAddress(): NonPayableTransactionObject<string>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(): NonPayableTransactionObject<void>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;

    /**
     * Sets the address of the Proxy implementation to clone.
     * @param _proxyImplementationAddress The address of the Proxy implementation to clone.
     */
    setImplementationAddress(
      _proxyImplementationAddress: string
    ): NonPayableTransactionObject<void>;

    /**
     * Creates an EIP-1167 style clone of a Proxy contract, points the Proxy to an        implementation and initializes it.
     * @param implementation The address to point the Proxy to.
     * @param initCallData The function to call on the implementation and the corresponding args.
     */
    deploy(
      implementation: string,
      initCallData: string | number[]
    ): NonPayableTransactionObject<void>;
  };
  events: {
    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    ProxyCloneCreated(cb?: Callback<ProxyCloneCreated>): EventEmitter;
    ProxyCloneCreated(
      options?: EventOptions,
      cb?: Callback<ProxyCloneCreated>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;

  once(event: "ProxyCloneCreated", cb: Callback<ProxyCloneCreated>): void;
  once(
    event: "ProxyCloneCreated",
    options: EventOptions,
    cb: Callback<ProxyCloneCreated>
  ): void;
}
